from heapq import heappush, heappop

def nbest(ABs):    # no need to pass in k or n
    k = len(ABs)
    n = len(ABs[0][0])
    def trypush(i, p, q):  # push pair (A_i,p, B_i,q) if possible
        A, B = ABs[i] # A_i, B_i
        if p < n and q < n and (i,p,q) not in used:
            heappush(h, (A[p]+B[q], i, p, q, (A[p],B[q])))
            used.add((i, p, q))
    h, used = [], set() # initialize
    for i in xrange(k):
        trypush(i, 0, 0)
    for _ in xrange(n):
        _, i, p, q, pair = heappop(h)
        yield pair      # return the next pair (in a lazy list)
        trypush(i,p+1,q)
        trypush(i,p,q+1)

if __name__=="__main__":
    l = []
    l.append([([1,2,4], [2,3,5]), ([0,2,4], [3,4,5])])
    l.append([([-1,2],[1,4]), ([0,2],[3,4]), ([0,1],[4,6]), ([-1,2],[1,5])])
    l.append([([5,6,10,14],[3,5,10,14]),([2,7,9,11],[3,8,12,16]),([1,3,8,10],[5,9,10,11]),([1,2,3,5],[3,4,9,10]),([4,5,9,10],[2,4,6,11]),([4,6,10,13],[2,3,5,9]),([3,7,10,12],[1,2,5,10]),([5,9,14,15],[4,8,13,14])])
    l.append([([1,6,8,13],[5,8,11,12]),([1,2,3,5],[5,9,11,13]),([3,5,7,10],[4,6,7,11]),([1,4,7,8],[4,9,11,15]),([4,8,10,13],[4,6,10,11]),([4,8,12,15],[5,10,11,13]),([2,3,4,8],[4,7,11,15]),([4,5,10,15],[5,6,7,8])])
    l.append([([4, 7, 8, 11], [3, 7, 9, 12]), ([5, 7, 10, 12], [4, 8, 13, 16]), ([1, 5, 10, 14], [5, 8, 12, 17]), ([4, 9, 10, 13], [4, 6, 11, 16]), ([4, 8, 13, 18], [5, 7, 10, 14]), ([2, 6, 9, 14], [1, 4, 8, 12]), ([4, 7, 9, 11], [4, 7, 8, 9]), ([3, 8, 9, 13], [4, 9, 14, 16])])
    l.append([([3, 7, 10, 12], [2, 6, 10, 11]), ([4, 7, 10, 14], [5, 6, 9, 11]), ([1, 3, 7, 9], [1, 4, 8, 12]), ([1, 3, 5, 6], [4, 5, 8, 13]), ([3, 5, 10, 11], [4, 6, 8, 12]), ([1, 3, 7, 10], [2, 4, 9, 10]), ([3, 7, 8, 10], [1, 4, 9, 12]), ([2, 4, 9, 11], [5, 10, 14, 18])])
    l.append([([2, 5, 9, 10], [5, 7, 8, 13]), ([5, 9, 12, 15], [2, 3, 8, 10]), ([1, 6, 8, 11], [3, 7, 11, 15]), ([3, 4, 6, 9], [4, 6, 8, 11]), ([2, 5, 6, 8], [5, 9, 11, 12]), ([3, 4, 5, 8], [1, 3, 5, 9]), ([2, 3, 7, 10], [3, 5, 9, 13]), ([1, 2, 7, 10], [4, 7, 9, 12])])
    l.append([([3, 8, 12, 17], [5, 8, 9, 14]), ([1, 3, 8, 12], [2, 5, 8, 10]), ([3, 6, 9, 10], [3, 4, 5, 8]), ([1, 5, 8, 13], [2, 7, 10, 12]), ([1, 4, 8, 11], [5, 6, 7, 12]), ([5, 9, 11, 16], [2, 5, 8, 13]), ([5, 10, 15, 20], [3, 8, 9, 11]), ([4, 5, 10, 11], [2, 6, 7, 10])])
    l.append([([5, 6, 8, 12], [4, 8, 11, 14]), ([3, 5, 6, 9], [3, 7, 9, 14]), ([4, 8, 9, 14], [3, 5, 8, 13]), ([4, 5, 9, 12], [2, 4, 9, 12]), ([3, 4, 7, 10], [3, 8, 9, 14]), ([3, 6, 9, 11], [5, 10, 14, 17]), ([2, 7, 10, 15], [1, 5, 10, 14]), ([5, 7, 10, 14], [4, 8, 13, 16])])
    l.append([([4, 6, 10, 14], [5, 9, 13, 17]), ([1, 6, 11, 15], [5, 6, 7, 11]), ([2, 7, 8, 10], [1, 2, 7, 12]), ([5, 10, 15, 17], [2, 7, 10, 14]), ([3, 5, 8, 10], [2, 7, 11, 16]), ([5, 10, 14, 16], [4, 7, 12, 17]), ([1, 3, 7, 9], [3, 4, 7, 11]), ([5, 7, 10, 11], [5, 7, 10, 12])])
    for i in l:
        print list(nbest(i))